<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

use Spatie\Activitylog\Traits\LogsActivity;
use Spatie\Activitylog\LogOptions;

class OrderHistory extends Model
{
    use HasFactory, LogsActivity;

    protected $fillable = [
        'order_id',
        'user_id',
        'action_type', // Add action_type field
        'description',
        'created_at',
        'updated_at',
    ];

    protected $dates = ['created_at', 'updated_at']; // Ensure timestamps are recognized

    public function order()
    {
        return $this->belongsTo(Order::class);
    }

    public function user()
    {
        return $this->belongsTo(User::class);
    }

    public function getActivitylogOptions(): LogOptions
    {
        return LogOptions::defaults()
            ->logOnly(['order_id', 'user_id', 'action_type', 'description'])
            ->logOnlyDirty()
            ->useLogName('order_history')
            ->dontSubmitEmptyLogs();
    }

    // Optionally, add a method to generate a description based on action type and other data
    public function generateDescription(OrderItem $orderItem = null, string $printerIdentifier = null): string
    {
        $description = '';

        switch ($this->action_type) {
            case 'created':
                $description = 'Order created by ' . $this->user->name;
                break;

            case 'updated':
                $description = 'Order updated by ' . $this->user->name;
                break;

            case 'cancelled':
                $description = 'Order cancelled by ' . $this->user->name;
                break;

            case 'closed':
                $description = 'Order closed by ' . $this->user->name;
                break;

            case 'item-added':
                $description = 'Item ';
                if ($orderItem) {
                    $description .= $orderItem->product->name . ' x ' . $orderItem->quantity;
                } else {
                    $description .= 'unknown item';
                }
                $description .= ' added to order by ' . $this->user->name;
                break;

            case 'item-removed':
                $description = 'Item ';
                if ($orderItem) {
                    $description .= $orderItem->product->name . ' x ' . $orderItem->quantity;
                } else {
                    $description .= 'unknown item';
                }
                $description = ' removed from order by ' . $this->user->name;
                break;

            case 'pos-print-generated':
                $description = 'POS Bill generated by ' . $this->user->name;
                if ($printerIdentifier) {
                    $description .= ' on ' . $printerIdentifier;
                }
                break;

            case 'pdf-generated':
                $description = 'PDF Bill generated by ' . $this->user->name;
                break;

            case 'kot-printed':
                $description = 'KOT print printed by ' . $this->user->name;
                if ($orderItem) {
                    $description .= ', for ' . $orderItem->product->name . ' x ' . $orderItem->quantity;
                }
                if ($printerIdentifier) {
                    $description .= ' on ' . $printerIdentifier;
                }
                break;
            default:
                $description = 'Unknown action type';
        }

        $description .= ' at ' . $this->created_at->format('d/m/Y H:i:s');

        return $description;
    }
}
